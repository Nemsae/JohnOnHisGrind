// Write a function, persistence, that takes in a positive parameter num and returns its multiplicative persistence, which is the number of times you must multiply the digits in num until you reach a single digit.

function persistence(num) {
   //code me
   if (num < 10) return 0

   let newNum = num.toString().split('').reduce((acc, c,i,a) => {
     return acc*c
   })

   if (newNum >= 10) return persistence(newNum) + 1

   return 1
}

const persistence2 = n => {
  let count = 0;
  while (n > 9) {
    count++;
    let newN = 1, x = 10;
    while (n/x >= 1 || (n%x - n%(x/10))/(x/10)) {
      newN *= (n%x - n%(x/10))/(x/10);
      x *= 10;
    }
    n = newN;
  }
  return count;
}

console.time('TEST1')
console.log('TEST10: ', persistence
console.timeEnd('TEST1')

console.time('TEST2')
console.log('TEST20: ', persistence
console.timeEnd('TEST2')
// persistence(39) === 3 // because 3*9 = 27, 2*7 = 14, 1*4=4
//                       // and 4 has only one digit
//
// persistence(999) === 4 // because 9*9*9 = 729, 7*2*9 = 126,
//                        // 1*2*6 = 12, and finally 1*2 = 2
//
// persistence(4) === 0 // because 4 is already a one-digit number
